# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/values.ipynb (unless otherwise specified).

__all__ = ['ExampleValue', 'ExampleValues', 'get_point_value', 'ShadowSunspecValueEncoder', 'example_device', 'ev',
           'example_values']

# Cell
import random
import json
import sunspec.core.suns as suns
from .factory import assemble, encode, ShadowSunspecEncoder
import shadowsunspec.defaults as defaults

# Cell

class ExampleValue:
    def __init__(self, values, mid, symbol, block_type=suns.SUNS_BLOCK_FIXED):
        try:
            self.values = list(values)
        except TypeError:
            self.values = [values]

        self.mid = mid
        self.symbol = symbol
        self.block_type = block_type

    def generate(self):
        return random.choice(self.values)

    def attach(self, dev):
        mid = self.mid
        symbol = self.symbol
        block_type = self.block_type

        models = dev.models.get(mid) or []
        altered = []
        for model in models:
            blocks = [b for b in model.blocks if b.block_type.type==block_type]
            for block in blocks:
                point = block.points[symbol]
                point.example = self
                altered.append(point)
        return altered

class ExampleValues:
    def __init__(self):
        self.examples = {}

    def key(self, mid, symbol):
        return '{mid}.{symbol}'.format(mid=mid, symbol=symbol)
    def add(self, *args, **kwargs):
        newexample = ExampleValue(*args, **kwargs)
        key = self.key(newexample.mid, newexample.symbol)
        self.examples[key] = newexample
    def attach(self, dev):
        for example in self.examples.values():
            example.attach(dev)

# Cell
def get_point_value(point):
    value = point.value_base
    if value is None:
        try:
            value = point.example.generate()
        except AttributeError:  #no example is given
            value = defaults.unimplemented[point.point_type.type]
    return value

# Cell
class ShadowSunspecValueEncoder(ShadowSunspecEncoder):
    def encode_point(self, point):
        pt = point.point_type
        value = get_point_value(point)
        return {pt.id: value}

# Cell
example_device = assemble([{'mid': 802}, {'mid': 805, 'repeating': 4}])
ev = ExampleValues()
ev.add(1, mid=805, symbol='StrIdx')
ev.add(16, mid=805, symbol='NCell')
ev.add(range(470, 520), mid=805, symbol='V')

ev.add(range(280, 330), mid=805, symbol='CellV', block_type='repeating')
ev.add(0, mid=805, symbol='CellSt', block_type='repeating')
ev.add(range(300, 340), mid=805, symbol='CellTmp', block_type='repeating')

ev.add(range(470, 520), mid=802, symbol='V')
ev.add(range(0, 1000), mid=802, symbol='A')
ev.add(range(0, 600), mid=802, symbol='W')  #assuming W_SF=1
ev.add(range(470, 520), mid=802, symbol='SoC')

example_values=ev

ev.attach(example_device)